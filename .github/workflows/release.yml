name: Bump version and release
run-name: ðŸŽ‰ Release - ${{ github.event.head_commit.message }}

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    runs-on: ubuntu-latest
    name: "Bump version and create changelog with commitizen"
    outputs:
      new_sha: ${{ steps.out.outputs.SHA }}
      version: ${{ steps.out.outputs.VERSION }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          # required
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          changelog_increment_filename: body.md
          github_token: ${{ steps.app-token.outputs.token }}

      - uses: actions/upload-artifact@v4
        with:
          name: changelog_increment_file
          path: body.md

      - name: Set outputs for next jobs
        id: out
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          version=$(cz version | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+")
          echo $version
          echo "::set-output name=SHA::$sha_new"
          echo "::set-output name=VERSION::$version"
      - run:
          echo "SHA=$sha_new" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV

  build-wheels:
    needs: [bump-version]

    runs-on: ${{ matrix.os }}
    name: "Build wheels"

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
        python-version: [ '3.10' ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump-version.outputs.new_sha }}
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Poetry configuration
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Package project
        run: poetry build -o wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*

  release:
    needs: [bump-version, build-wheels]

    runs-on: ubuntu-latest
    name: "Release with python packages"
    #    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write
      packages: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: changelog_increment_file
          path: ./
          merge-multiple: true

      - name: Download python wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: ./wheelhouse
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: "body.md"
          files: ./wheelhouse/*
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./wheelhouse/